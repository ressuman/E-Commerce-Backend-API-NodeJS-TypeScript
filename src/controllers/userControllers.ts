import { Request, Response } from "express";
import { AppError, asyncHandler } from "@/middlewares/asyncHandler.js";
import User, {
  IUser,
  PasswordConfirmUser,
  rolePermissions,
  UserRole,
} from "@/models/userModel.js";
import { formatUserResponse } from "@/utils/users.js";
const { default: pick } = await import("lodash-es/pick");
const { default: omit } = await import("lodash-es/omit");

// Admin: Create User (Manual creation)
export const createUser = asyncHandler(async (req, res) => {
  const { password, passwordConfirm, ...userData } = req.body;

  // Map to authentication structure
  const newUser = await User.createUser({
    ...userData,
    authentication: {
      password: password,
      // salt will be auto-generated by pre-save hook
    },
    passwordConfirm: passwordConfirm, // Required for validation
    isVerified: true,
  });
  res.status(201).json({
    status: "success",
    data: formatUserResponse(newUser),
  });
});

// Admin: Get all users
export const getAllUsers = asyncHandler(async (req: Request, res: Response) => {
  const [users, totalCount] = await Promise.all([
    User.getUsers().lean<IUser[]>(),
    User.countDocuments(),
  ]);

  if (!users) throw new AppError("No users found", 404);

  const response = users.map((user) => formatUserResponse(user));
  res.status(200).json({ status: "success", data: { totalCount, response } });
});

// Admin: Get User by ID
export const getUserById = asyncHandler(async (req, res) => {
  const user = await User.getUserById(req.params.id)
    .select(
      "_id firstName lastName username email role permissions isVerified isActive createdAt updatedAt"
    )
    .lean<IUser>();

  if (!user) throw new AppError("User not found", 404);
  res.json({ status: "success", data: formatUserResponse(user) });
});

// Get current user profile // Self: Get Profile
export const getMyProfile = asyncHandler(
  async (req: Request, res: Response) => {
    if (!req.user) throw new AppError("User not found", 404);
    res
      .status(200)
      .json({ status: "success", data: formatUserResponse(req.user) });
  }
);

// Update Any User (Admin)
export const updateUser = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const restrictedUpdates = [
    "role",
    "permissions",
    "isVerified",
    "authentication",
  ];
  const filteredUpdates = omit(req.body, restrictedUpdates);

  if (Object.keys(filteredUpdates).length === 0) {
    throw new AppError("No valid fields to update", 400);
  }

  const updatedUser = await User.updateUserById(id, filteredUpdates)
    .select(
      "firstName lastName username email role permissions isVerified isActive createdAt updatedAt"
    )
    .lean<IUser>();

  if (!updatedUser) {
    throw new AppError("User not found", 404);
  }

  res.status(200).json({
    status: "success",
    data: formatUserResponse(updatedUser),
  });
});

// Update My Profile (Self-service)
export const updateMyProfile = asyncHandler(
  async (req: Request, res: Response) => {
    if (!req.user) {
      throw new AppError("Authentication required", 401);
    }

    const allowedUpdates = ["firstName", "lastName", "username"];
    const filteredUpdates = pick(req.body, allowedUpdates);

    if (Object.keys(filteredUpdates).length === 0) {
      throw new AppError("No valid fields to update", 400);
    }

    const updatedUser = await User.updateUserById(
      req.user._id.toString(),
      filteredUpdates
    )
      .select(
        "firstName lastName username email role permissions isVerified isActive createdAt updatedAt"
      )
      .lean<IUser>();

    if (!updatedUser) {
      throw new AppError("User not found", 404);
    }

    res.status(200).json({
      status: "success",
      data: formatUserResponse(updatedUser),
    });
  }
);

export const updateUserPassword = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { newPassword, forceLogout } = req.body;

    // Get user document
    const user = await User.findById(id).select("+authentication.password");
    if (!user) throw new AppError("User not found", 404);

    // Set new password and confirmation
    user.authentication.password = newPassword;
    (user as PasswordConfirmUser).passwordConfirm = newPassword; // Using virtual field

    // Handle force logout
    if (forceLogout) {
      user.authentication.sessionToken = undefined;
    }

    // Save with validation hooks
    const updatedUser = await user.save();

    res.status(200).json({
      status: "success",
      data: {
        message: "Password updated successfully",
        user: formatUserResponse(updatedUser),
      },
    });
  }
);

// User: Update own password
export const updateOwnPassword = asyncHandler(
  async (req: Request, res: Response) => {
    const currentUser = req.user;
    if (!currentUser) throw new AppError("Authentication required", 401);

    const user = await User.findById(currentUser._id).select(
      "+authentication.password  +authentication.salt"
    );
    if (!user) throw new AppError("User not found", 404);

    const { currentPassword, newPassword, newPasswordConfirm } = req.body;

    // Verify current password
    const isMatch = await user.comparePassword(currentPassword);
    if (!isMatch) throw new AppError("Current password is incorrect", 401);

    // Update password fields
    user.authentication.password = newPassword;
    (user as PasswordConfirmUser).passwordConfirm = newPasswordConfirm;

    // Save with validation hooks
    const updatedUser = await user.save();

    res.status(200).json({
      status: "success",
      data: {
        message: "Password updated successfully",
        user: formatUserResponse(updatedUser),
      },
    });
  }
);

// Update User Role (Admin Only)
export const updateUserRole = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { role } = req.body;

    if (!Object.values(UserRole).includes(role)) {
      throw new AppError("Invalid user role", 400);
    }

    const updatedUser = await User.updateUserById(id, {
      role,
      permissions: rolePermissions[role],
    })
      .select(
        "firstName lastName username email role permissions isVerified isActive createdAt updatedAt"
      )
      .lean<IUser>();

    if (!updatedUser) {
      throw new AppError("User not found", 404);
    }

    res.status(200).json({
      status: "success",
      data: formatUserResponse(updatedUser),
    });
  }
);

// Admin: Update user permissions
export const updateUserPermissions = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { permissions } = req.body;

    const user = await User.getUserById(id);
    if (!user) throw new AppError("User not found", 404);

    // Validate permissions against role
    const rolePerms = rolePermissions[user.role];
    const invalidPerms = Object.entries(permissions)
      .filter(
        ([key, value]) => value && !rolePerms[key as keyof UserPermissions]
      )
      .map(([key]) => key);

    if (invalidPerms.length > 0) {
      throw new AppError(
        `Invalid permissions for ${user.role} role: ${invalidPerms.join(", ")}`,
        400
      );
    }

    const updatedUser = await User.updateUserById(id, { permissions })
      .select(
        "firstName lastName username email role permissions isVerified isActive createdAt updatedAt"
      )
      .lean<IUser>();

    if (!updatedUser) throw new AppError("User not found", 404);

    res.status(200).json({
      status: "success",
      data: {
        permissions: updatedUser.permissions,
        role: updatedUser.role,
      },
    });
  }
);

// Deactivate user (soft delete)
export const deactivateUser = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { reason } = req.body;

    const updatedUser = await User.updateUserById(id, {
      isActive: false,
      deactivationReason: reason,
      deactivatedAt: new Date(),
    });

    if (!updatedUser) throw new AppError("User not found", 404);

    res.status(204).json({ status: "success", data: null });
  }
);

// Admin: Delete user (hard delete)
export const deleteUser = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const user = await User.deleteUserById(id);

  if (!user) throw new AppError("User not found", 404);

  res.status(204).json({ status: "success", data: null });
});
